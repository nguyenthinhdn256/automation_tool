import tkinter as tk
from tkinter import ttk
import random

class AdvancedBorderedTable:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üíº Dashboard - Vi·ªÅn ƒëen Excel")
        self.root.geometry("1000x600")
        self.root.configure(bg='#f5f5f5')
        
        self.setup_bordered_styles()
        self.create_widgets()
        self.load_data()
        
    def setup_bordered_styles(self):
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # Style v·ªõi vi·ªÅn ƒëen r√µ r√†ng
        self.style.configure("ExcelBorder.Treeview",
                           background="white",
                           foreground="black",
                           rowheight=35,
                           fieldbackground="white",
                           font=('Arial', 10),
                           borderwidth=1,
                           relief="solid")
        
        self.style.configure("ExcelBorder.Treeview.Heading",
                           background="#D9D9D9",
                           foreground="black",
                           font=('Arial', 11, 'bold'),
                           borderwidth=2,
                           relief="solid")
        
        # Map cho selection v·ªõi vi·ªÅn
        self.style.map("ExcelBorder.Treeview",
                      background=[('selected', '#316AC5')],
                      foreground=[('selected', 'white')],
                      relief=[('selected', 'solid')],
                      borderwidth=[('selected', 2)])
        
    def create_widgets(self):
        # Header
        header_frame = tk.Frame(self.root, bg='#2c3e50', height=80)
        header_frame.pack(fill='x', padx=0, pady=0)
        header_frame.pack_propagate(False)
        
        title = tk.Label(header_frame, 
                        text="üè¢ DANH S√ÅCH NH√ÇN VI√äN",
                        font=('Arial', 20, 'bold'),
                        bg='#2c3e50', fg='white')
        title.pack(expand=True)
        
        # Main content frame v·ªõi vi·ªÅn
        content_frame = tk.Frame(self.root, bg='white', relief='solid', bd=2)
        content_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Toolbar v·ªõi vi·ªÅn
        toolbar = tk.Frame(content_frame, bg='#f0f0f0', height=50, relief='solid', bd=1)
        toolbar.pack(fill='x', pady=(10, 10))
        toolbar.pack_propagate(False)
        
        # Buttons
        btn_frame = tk.Frame(toolbar, bg='#f0f0f0')
        btn_frame.pack(side='left', padx=10, pady=10)
        
        buttons = [
            ("‚ûï Th√™m", '#28a745', self.add_employee),
            ("‚úèÔ∏è S·ª≠a", '#ffc107', self.edit_employee),
            ("üóëÔ∏è X√≥a", '#dc3545', self.delete_employee)
        ]
        
        for text, color, cmd in buttons:
            btn = tk.Button(btn_frame, text=text, bg=color, fg='white',
                           font=('Arial', 9, 'bold'), relief='solid', bd=1,
                           padx=10, pady=5, command=cmd)
            btn.pack(side='left', padx=5)
        
        # Search v·ªõi vi·ªÅn
        search_frame = tk.Frame(toolbar, bg='#f0f0f0')
        search_frame.pack(side='right', padx=10, pady=10)
        
        tk.Label(search_frame, text="üîç", bg='#f0f0f0',
                font=('Arial', 12)).pack(side='left')
        self.search_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=self.search_var,
                               font=('Arial', 10), width=20, relief='solid', bd=1)
        search_entry.pack(side='left', padx=5)
        
        # Table frame v·ªõi vi·ªÅn ƒë·∫≠m
        table_frame = tk.Frame(content_frame, bg='black', relief='solid', bd=3)
        table_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Treeview v·ªõi grid lines
        columns = ('ID', 'H·ªç t√™n', 'Ph√≤ng ban', 'Ch·ª©c v·ª•', 'L∆∞∆°ng', 'Tr·∫°ng th√°i')
        self.tree = ttk.Treeview(table_frame, columns=columns, show='headings', 
                                style="ExcelBorder.Treeview")
        
        # C·∫•u h√¨nh columns v·ªõi vi·ªÅn
        widths = [80, 200, 150, 120, 150, 100]
        for i, col in enumerate(columns):
            self.tree.heading(col, text=col, anchor='center')
            self.tree.column(col, width=widths[i], anchor='center',
                           minwidth=50)
        
        # Scrollbars v·ªõi vi·ªÅn
        v_scrollbar = ttk.Scrollbar(table_frame, orient='vertical', command=self.tree.yview)
        h_scrollbar = ttk.Scrollbar(table_frame, orient='horizontal', command=self.tree.xview)
        self.tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # Pack v·ªõi padding ƒë·ªÉ t·∫°o vi·ªÅn
        v_scrollbar.pack(side='right', fill='y', padx=(1,0), pady=1)
        h_scrollbar.pack(side='bottom', fill='x', padx=1, pady=(1,0))
        self.tree.pack(side='left', fill='both', expand=True, padx=1, pady=1)
        
        # Status bar v·ªõi vi·ªÅn
        status_frame = tk.Frame(self.root, bg='#343a40', height=30, relief='solid', bd=1)
        status_frame.pack(fill='x', side='bottom')
        status_frame.pack_propagate(False)
        
        self.status_label = tk.Label(status_frame, text="‚úÖ S·∫µn s√†ng",
                                    bg='#343a40', fg='white', font=('Arial', 9))
        self.status_label.pack(side='left', padx=10, pady=5)
        
        # Th√™m grid lines sau khi render
        self.root.after(200, self.add_excel_grid)
        
    def add_excel_grid(self):
        """Th√™m l∆∞·ªõi grid gi·ªëng Excel v·ªõi vi·ªÅn ƒëen"""
        # T·∫°o canvas overlay ƒë·ªÉ v·∫Ω grid
        tree_bbox = self.tree.bbox('')
        if tree_bbox:
            canvas = tk.Canvas(self.tree, highlightthickness=0, bg='')
            canvas.place(x=0, y=0, relwidth=1, relheight=1)
            
            # V·∫Ω ƒë∆∞·ªùng k·∫ª d·ªçc (c·ªôt)
            col_positions = [0]
            for i, col in enumerate(self.tree['columns']):
                col_width = self.tree.column(col, 'width')
                col_positions.append(col_positions[-1] + col_width)
                
                if i < len(self.tree['columns']) - 1:  # Kh√¥ng v·∫Ω ƒë∆∞·ªùng cu·ªëi
                    x = col_positions[-1]
                    canvas.create_line(x, 0, x, 2000, fill='black', width=1)
            
            # V·∫Ω ƒë∆∞·ªùng k·∫ª ngang (h√†ng)
            row_height = 35
            for i in range(20):  # V·∫Ω nhi·ªÅu ƒë∆∞·ªùng ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªß
                y = i * row_height
                canvas.create_line(0, y, sum(col_positions), y, fill='black', width=1)
    
    def load_data(self):
        employees = [
            ('NV001', 'Nguy·ªÖn VƒÉn An', 'IT', 'Tr∆∞·ªüng nh√≥m', '25,000,000', 'ƒêang l√†m'),
            ('NV002', 'Tr·∫ßn Th·ªã B√¨nh', 'HR', 'Qu·∫£n l√Ω', '30,000,000', 'ƒêang l√†m'),
            ('NV003', 'L√™ VƒÉn C∆∞·ªùng', 'Marketing', 'Nh√¢n vi√™n', '15,000,000', 'Th·ª≠ vi·ªác'),
            ('NV004', 'Ph·∫°m Th·ªã Dung', 'Sales', 'Tr∆∞·ªüng nh√≥m', '22,000,000', 'ƒêang l√†m'),
            ('NV005', 'Ho√†ng VƒÉn Em', 'Finance', 'Nh√¢n vi√™n', '18,000,000', 'Ngh·ªâ ph√©p'),
            ('NV006', 'Nguy·ªÖn Th·ªã Lan', 'IT', 'Gi√°m ƒë·ªëc', '50,000,000', 'ƒêang l√†m'),
            ('NV007', 'Tr·∫ßn VƒÉn Nam', 'HR', 'Nh√¢n vi√™n', '12,000,000', 'ƒêang l√†m'),
            ('NV008', 'L√™ Th·ªã Hoa', 'Marketing', 'Qu·∫£n l√Ω', '28,000,000', 'ƒêang l√†m')
        ]
        
        for emp in employees:
            self.tree.insert('', 'end', values=emp)
        
        self.update_status(f"ƒê√£ t·∫£i {len(employees)} nh√¢n vi√™n")
    
    def add_employee(self):
        self.update_status("Ch·ª©c nƒÉng th√™m nh√¢n vi√™n")
    
    def edit_employee(self):
        selection = self.tree.selection()
        if selection:
            self.update_status("Ch·ª©c nƒÉng s·ª≠a nh√¢n vi√™n")
        else:
            self.update_status("Vui l√≤ng ch·ªçn nh√¢n vi√™n c·∫ßn s·ª≠a")
    
    def delete_employee(self):
        selection = self.tree.selection()
        if selection:
            self.tree.delete(selection)
            self.update_status("ƒê√£ x√≥a nh√¢n vi√™n")
        else:
            self.update_status("Vui l√≤ng ch·ªçn nh√¢n vi√™n c·∫ßn x√≥a")
    
    def update_status(self, message):
        self.status_label.config(text=f"üìä {message}")
    
    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = AdvancedBorderedTable()
    app.run()